# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

environment:
  global:
  # TODO This is the Rust channel that build jobs will use by default but can be
  # overridden on a case by case basis down below
    RUST_VERSION: stable

    # TODO Update this to match the name of your project.
    CRATE_NAME: shardoverse

  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  matrix:
    # MinGW
    #- TARGET: i686-pc-windows-gnu
    - TARGET: x86_64-pc-windows-gnu

    # MSVC
    #- TARGET: i686-pc-windows-msvc
    #- TARGET: x86_64-pc-windows-msvc

    # Testing other channels
    #- TARGET: x86_64-pc-windows-gnu
    #  RUST_VERSION: nightly
    #- TARGET: x86_64-pc-windows-msvc
    #  RUST_VERSION: nightly

install:
  - ps: $env:PATH += ';C:\msys64\mingw64\bin'
  - echo "section: install"
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

  # Steps copied from the rust-sdl2 project:
  - set -xueo pipefail
  - wget https://www.libsdl.org/release/SDL2-2.0.10.tar.gz -O sdl2.tar.gz
  - tar xzf sdl2.tar.gz
  - pushd SDL2-* && ./configure && make && sudo make install && popd

  - wget -q https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.14.tar.gz
  - tar xzf SDL2_ttf-*.tar.gz
  - pushd SDL2_ttf-* && ./configure && make && sudo make install && popd

  - wget -q https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.1.tar.gz
  - tar xzf SDL2_image-*.tar.gz
  - pushd SDL2_image-* && ./configure && make && sudo make install && popd

  - wget -q https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-2.0.4.tar.gz
  - tar xzf SDL2_mixer-*.tar.gz
  - pushd SDL2_mixer-* && ./configure && make && sudo make install && popd

  - wget -q -O SDL2_gfx-1.0.1.tar.gz https://sourceforge.net/projects/sdl2gfx/files/SDL2_gfx-1.0.1.tar.gz/download
  - tar xzf SDL2_gfx-*.tar.gz
  - pushd SDL2_gfx-* && ./autogen.sh && ./configure && make && sudo make install && popd


# TODO This is the "test phase", tweak it as you see fit
test_script:
  # we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build --target %TARGET% &&
      cargo build --target %TARGET% --release &&
      cargo test --target %TARGET% &&
      cargo test --target %TARGET% --release &&
      cargo run --target %TARGET% &&
      cargo run --target %TARGET% --release
    )

before_deploy:
  # TODO Update this to build the artifacts that matter to you
  - cargo rustc --target %TARGET% --release --bin %CRATE_NAME% -- -C lto
  - ps: ci\before_deploy.ps1

deploy:
  #artifact: /.*\.zip/
  # TODO update `auth_token.secure`
  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
  # - Encrypt it. Go to https://ci.appveyor.com/tools/encrypt
  # - Paste the output down here
  #auth_token:
  #  secure: t3puM/2hOig26EHhAodcZBc61NywF7/PFEpimR6SwGaCiqS07KR5i7iAhSABmBp7
  #description: ''
  #on:
  #  # TODO Here you can pick which targets will generate binary releases
  #  # In this example, there are some targets that are tested using the stable
  #  # and nightly channels. This condition makes sure there is only one release
  #  # for such targets and that's generated using the stable channel
  #  RUST_VERSION: stable
  #  appveyor_repo_tag: true
  #provider: GitHub

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    # Release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  - provider: Email
    on_build_success: false

# Building is done in the test phase, so we disable Appveyor's build phase.
build: false
