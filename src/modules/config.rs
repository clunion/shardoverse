/*
## ---------------------------------------------------------------------------------------------------------------------------
## PROJECT:             Shardoverse
## HOME:      https://github.com/clunion/shardoverse
## ---------------------------------------------------------------------------------------------------------------------------
## FILE:     config.rs
## SYNOPSIS: functions for loading, storing, reding and manipulating the configuration information
## ---------------------------------------------------------------------------------------------------------------------------
## DESCRIPTION:
## A Roguelike Peer-to-Peer Multi Player Dungeon Explorer and Fortres Builder (?) Game written in Rust
##----------------------------------------------------------------------------------------------------------------------------
## LICENSE:
## Copyright 2020 by Christian Lunau (clunion), Julian Lunau and Jaron Lunau.
## MIT-License, see LICENSE.md file 
## ---------------------------------------------------------------------------------------------------------------------------
## VERSION:  DATE:       AUTHOR: CHANGES:
## 0.1       2020-04-04  CLu     creation
## ---------------------------------------------------------------------------------------------------------------------------
## TODO:
##    - everything
## ---------------------------------------------------------------------------------------------------------------------------
*/

//--- MODULES EXTERNAL: ------------------------------------------------------------------------------------------------------
// Extern crate declarations only in main.rs (to be reevaluated later)

use std::io;

//--- MODULES LOCAL: ---------------------------------------------------------------------------------------------------------
use crate::modules::assets::cursors;   // <dirname>::<filename>::<explicit mod name>

//--- CONSTANTS: -------------------------------------------------------------------------------------------------------------
//--- none ---

//--- TYPES: -----------------------------------------------------------------------------------------------------------------
//--- none ---

//--- ENUMS: -----------------------------------------------------------------------------------------------------------------
//--- none ---

//--- STRUCTS: ---------------------------------------------------------------------------------------------------------------
//--- none ---

//--- GLOBAL VARS: -----------------------------------------------------------------------------------------------------------
//--- none ---

 
/*
## ---------------------------------------------------------------------------------------------------------------------------
## FUNCTION:   <function name>
## TYPE:       <type of function: local, call-back, ...>
## ---------------------------------------------------------------------------------------------------------------------------
## PARAMETER:  <list of parameters>
## RETURNS:    <list of return values and their meaning>
## ---------------------------------------------------------------------------------------------------------------------------
## DESCRIPTION:
## <textual description of the function, stating:
##  1.: the purpose of this function (goal, WHAT shall be achieved with it)
##  2.: the way this function works (HOW its works)> 
## ---------------------------------------------------------------------------------------------------------------------------
## VERSION:    DATE:       AUTHOR: CHANGES:
## 0.1         2020-MM-DD  CLu     initial version
## ---------------------------------------------------------------------------------------------------------------------------
## TODO:
##  everything
## ---------------------------------------------------------------------------------------------------------------------------
*/
pub fn load() -> Result<bool, io::Error>  
{
println!("load() called");

Ok(true)
}

/*
## ---------------------------------------------------------------------------------------------------------------------------
## FUNCTION:   <function name>
## TYPE:       <type of function: local, call-back, ...>
## ---------------------------------------------------------------------------------------------------------------------------
## PARAMETER:  <list of parameters>
## RETURNS:    <list of return values and their meaning>
## ---------------------------------------------------------------------------------------------------------------------------
## DESCRIPTION:
## <textual description of the function, stating:
##  1.: the purpose of this function (goal, WHAT shall be achieved with it)
##  2.: the way this function works (HOW its works)> 
## ---------------------------------------------------------------------------------------------------------------------------
## VERSION:    DATE:       AUTHOR: CHANGES:
## 0.1         2020-MM-DD  CLu     initial version
## ---------------------------------------------------------------------------------------------------------------------------
## TODO:
##  everything
## ---------------------------------------------------------------------------------------------------------------------------
*/
pub fn save() -> Result<bool, io::Error> 
{
println!("save() called");

Ok(true)
}

/*
## ---------------------------------------------------------------------------------------------------------------------------
## FUNCTION:   <function name>
## TYPE:       <type of function: local, call-back, ...>
## ---------------------------------------------------------------------------------------------------------------------------
## PARAMETER:  <list of parameters>
## RETURNS:    <list of return values and their meaning>
## ---------------------------------------------------------------------------------------------------------------------------
## DESCRIPTION:
## <textual description of the function, stating:
##  1.: the purpose of this function (goal, WHAT shall be achieved with it)
##  2.: the way this function works (HOW its works)> 
## ---------------------------------------------------------------------------------------------------------------------------
## VERSION:    DATE:       AUTHOR: CHANGES:
## 0.1         2020-MM-DD  CLu     initial version
## ---------------------------------------------------------------------------------------------------------------------------
## TODO:
##  everything
## ---------------------------------------------------------------------------------------------------------------------------
*/
pub fn init() -> Result<String, io::Error> 
{
println!("init() called");

match cursors::load()
    {
    Ok(_)      => {},
    Err(error) => { println!("Error loading cursors: {:?}", error); return Err(error); },
    }

let retstr: String = "init ok".to_string();
    
Ok(retstr)
}

/*
## ---------------------------------------------------------------------------------------------------------------------------
## FUNCTION:   <function name>
## TYPE:       <type of function: local, call-back, ...>
## ---------------------------------------------------------------------------------------------------------------------------
## PARAMETER:  <list of parameters>
## RETURNS:    <list of return values and their meaning>
## ---------------------------------------------------------------------------------------------------------------------------
## DESCRIPTION:
## <textual description of the function, stating:
##  1.: the purpose of this function (goal, WHAT shall be achieved with it)
##  2.: the way this function works (HOW its works)> 
## ---------------------------------------------------------------------------------------------------------------------------
## VERSION:    DATE:       AUTHOR: CHANGES:
## 0.1         2020-MM-DD  CLu     initial version
## ---------------------------------------------------------------------------------------------------------------------------
## TODO:
##  everything
## ---------------------------------------------------------------------------------------------------------------------------
*/
pub fn exit() -> Result<String, io::Error> 
{

let retstr: String = "exit ok".to_string();
println!("exit() called");

Ok(retstr)
}


#[cfg(test)]
mod tests 
{
  // importing names from outer (for mod tests) scope:
  use super::*;
  
  /*
  ## ---------------------------------------------------------------------------------------------------------------------------
  ## FUNCTION:   test_init()
  ## TYPE:       unit test function
  ## ---------------------------------------------------------------------------------------------------------------------------
  ## PARAMETER:  -
  ## RETURNS:    -
  ## ---------------------------------------------------------------------------------------------------------------------------
  */
  #[test]
  fn test_init() 
  {
    let result = init();
    assert!(result.is_ok());
  }

} // End of: mod test

